from xmlrpc.client import Binary

from pyomo.environ import *

model = ConcreteModel()

# Instance
J = 5
K = [3293, 3442, 8081, 3117, 1989]
I = 100
e = [1310, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    1310, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    24, 24, 24, 24, 1310, 1310, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 1310, 1310, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 1310, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
    24, 24, 24, 24, 24, 1310, 1310, 1310, 24, 24]
d = [
    [1358, 5598, 6440, 6923, 10384],
    [960, 4800, 5598, 6147, 9884],
    [1358, 4073, 4800, 5431, 9455],
    [2147, 3461, 4073, 4800, 9107],
    [3036, 3036, 3461, 4293, 8851],
    [3958, 2880, 3036, 3958, 8693],
    [4895, 3036, 2880, 3840, 8640],
    [5839, 3461, 3036, 3958, 8693],
    [6788, 4073, 3461, 4293, 8851],
    [7740, 4800, 4073, 4800, 9107],
    [960, 5170, 6072, 6440, 9600],
    [0, 4293, 5170, 5598, 9057],
    [960, 3461, 4293, 4800, 8587],
    [1920, 2715, 3461, 4073, 8202],
    [2880, 2147, 2715, 3461, 7916],
    [3840, 1920, 2147, 3036, 7740],
    [4800, 2147, 1920, 2880, 7680],
    [5760, 2715, 2147, 3036, 7740],
    [6720, 3461, 2715, 3461, 7916],
    [7680, 4293, 3461, 4073, 8202],
    [1358, 4895, 5839, 6072, 8851],
    [960, 3958, 4895, 5170, 8258],
    [1358, 3036, 3958, 4293, 7740],
    [2147, 2147, 3036, 3461, 7311],
    [3036, 1358, 2147, 2715, 6989],
    [3958, 960, 1358, 2147, 6788],
    [4895, 1358, 960, 1920, 6720],
    [5839, 2147, 1358, 2147, 6788],
    [6788, 3036, 2147, 2715, 6989],
    [7740, 3958, 3036, 3461, 7311],
    [2147, 4800, 5760, 5839, 8146],
    [1920, 3840, 4800, 4895, 7498],
    [2147, 2880, 3840, 3958, 6923],
    [2715, 1920, 2880, 3036, 6440],
    [3461, 960, 1920, 2147, 6072],
    [4293, 0, 960, 1358, 5839],
    [5170, 960, 0, 960, 5760],
    [6072, 1920, 960, 1358, 5839],
    [6989, 2880, 1920, 2147, 6072],
    [7916, 3840, 2880, 3036, 6440],
    [3036, 4895, 5839, 5760, 7498],
    [2880, 3958, 4895, 4800, 6788],
    [3036, 3036, 3958, 3840, 6147],
    [3461, 2147, 3036, 2880, 5598],
    [4073, 1358, 2147, 1920, 5170],
    [4800, 960, 1358, 960, 4895],
    [5598, 1358, 960, 0, 4800],
    [6440, 2147, 1358, 960, 4895],
    [7311, 3036, 2147, 1920, 5170],
    [8202, 3958, 3036, 2880, 5598],
    [3958, 5170, 6072, 5839, 6923],
    [3840, 4293, 5170, 4895, 6147],
    [3958, 3461, 4293, 3958, 5431],
    [4293, 2715, 3461, 3036, 4800],
    [4800, 2147, 2715, 2147, 4293],
    [5431, 1920, 2147, 1358, 3958],
    [6147, 2147, 1920, 960, 3840],
    [6923, 2715, 2147, 1358, 3958],
    [7740, 3461, 2715, 2147, 4293],
    [8587, 4293, 3461, 3036, 4800],
    [4895, 5598, 6440, 6072, 6440],
    [4800, 4800, 5598, 5170, 5598],
    [4895, 4073, 4800, 4293, 4800],
    [5170, 3461, 4073, 3461, 4073],
    [5598, 3036, 3461, 2715, 3461],
    [6147, 2880, 3036, 2147, 3036],
    [6788, 3036, 2880, 1920, 2880],
    [7498, 3461, 3036, 2147, 3036],
    [8258, 4073, 3461, 2715, 3461],
    [9057, 4800, 4073, 3461, 4073],
    [5839, 6147, 6923, 6440, 6072],
    [5760, 5431, 6147, 5598, 5170],
    [5839, 4800, 5431, 4800, 4293],
    [6072, 4293, 4800, 4073, 3461],
    [6440, 3958, 4293, 3461, 2715],
    [6923, 3840, 3958, 3036, 2147],
    [7498, 3958, 3840, 2880, 1920],
    [8146, 4293, 3958, 3036, 2147],
    [8851, 4800, 4293, 3461, 2715],
    [9600, 5431, 4800, 4073, 3461],
    [6788, 6788, 7498, 6923, 5839],
    [6720, 6147, 6788, 6147, 4895],
    [6788, 5598, 6147, 5431, 3958],
    [6989, 5170, 5598, 4800, 3036],
    [7311, 4895, 5170, 4293, 2147],
    [7740, 4800, 4895, 3958, 1358],
    [8258, 4895, 4800, 3840, 960],
    [8851, 5170, 4895, 3958, 1358],
    [9504, 5598, 5170, 4293, 2147],
    [10205, 6147, 5598, 4800, 3036],
    [7740, 7498, 8146, 7498, 5760],
    [7680, 6923, 7498, 6788, 4800],
    [7740, 6440, 6923, 6147, 3840],
    [7916, 6072, 6440, 5598, 2880],
    [8202, 5839, 6072, 5170, 1920],
    [8587, 5760, 5839, 4895, 960],
    [9057, 5839, 5760, 4800, 0],
    [9600, 6072, 5839, 4895, 960],
    [10205, 6440, 6072, 5170, 1920],
    [10861, 6923, 6440, 5598, 2880]
]
M = max(e) * max([max(row) for row in d]) * J
S = 99999

# Laravel X = Instalar ou não o local de votação
model.x = Var(range(J), domain=Binary)
# Laravel Y = Demanda i é atendida por j ou não
model.y = Var(range(I), range(J), domain=Binary)

# Função objective
model.obj = Objective(expr=sum([M * model.x[j] for j in range(J)]) + sum([e[i] * d[i][j] * model.y[i, j]
                                                                          for i in range(I) for j in range(J)]))

model.cons = ConstraintList()

# Restriction 1
for i in range(I):
    model.cons.add(sum(model.y[i, j] for j in range(J)) == 1)

# Restriction 2
for j in range(J):
    model.cons.add(sum(e[i] * model.y[i, j] for i in range(I)) <= K[j] * model.x[j])

# Restriction 3
for i in range(I):
    for j in range(J):
       model.cons.add(model.y[i, j] * d[i][j] <= S)

# Solutes
opt = SolverFactory('glpk')
opt.solve(model, timelimit=300).write()
print(model.obj.expr())

# Impair valor's x
print("Valores x:")
for i in range(J):
    print(f"x[{i + 1}] = {model.x[i].value}")

# Impair valor's y
print("\nValores y:")
for i in range(I):
    for j in range(J):
        if model.y[i,j].value == 1:
         print(f"y[{i + 1},{j + 1}] = {model.y[i,j].value}")
